Question: What is collection in Java?

In Java, a collection is an object that represents a group of objects, known as elements. The Java (Collections Framework) provides a set of
interfaces and classes to represent and manipulate collections of objects. Collections are used to store, retrieve, manipulate, and process data
in various ways.

The main interfaces in the Java Collections Framework include:

1. **Collection:** This is the root interface for most collection types. It defines the basic operations that all collections should support,
such as adding, removing, and checking the presence of elements.

2. **List:** A List is an ordered collection that allows duplicate elements. Elements in a List can be accessed by their index (position in the list).

3. **Set:** A Set is an unordered collection that does not allow duplicate elements. It models the mathematical set abstraction and provides methods
for checking the presence of elements.

4. **Map:** A Map is a collection of key-value pairs, where each key is associated with exactly one value. It provides methods to associate values
with keys and retrieve values based on keys.

5. **Queue:** A Queue represents a collection designed for holding elements before processing. It follows the First-In-First-Out (FIFO) principle,
where elements are added at the end and removed from the beginning.

6. **Deque:** A Deque (Double-Ended Queue) is a collection that supports adding and removing elements from both ends. It extends the Queue interface
and provides more flexibility in element manipulation.

Some commonly used classes that implement these interfaces include ArrayList, LinkedList, HashSet, TreeSet, HashMap, and TreeMap, among others.

Using the Java Collections Framework, developers can choose the appropriate collection type based on their specific requirements and easily perform
common operations like adding, removing, searching, sorting, and iterating over elements in a consistent and efficient manner. This framework plays a crucial role in Java programming and provides a standardized way to work with collections of objects.


Question: Why collections frameworks introduced in java?

The Java Collections Framework was introduced to provide a unified architecture for representing and manipulating collections of objects in Java.
Before the introduction of the Collections Framework, Java had various (ad-hoc classes) (such as Vector, Hashtable, and Enumeration) for working with
collections. These classes were not consistent, and each had its own set of methods and interfaces.

The main goals of introducing the Collections Framework in Java were:

1. **Consistency:** The Collections Framework provides a consistent and uniform way to represent and manipulate collections of objects.
It defines a set of interfaces and classes that work uniformly across different types of collections.

2. **Interoperability:** With the introduction of a common framework, it became easier to use different types of collections together.
Collections could be easily passed as parameters to methods, returned from methods, and used interchangeably, leading to increased code flexibility.

3. **Extensibility:** The framework is designed to be extensible, allowing developers to create their own types of collections by implementing standard
interfaces. This extensibility promotes the creation of custom collection classes tailored to specific needs.

4. **Ease of use:** The Collections Framework simplifies common operations on collections by providing a rich set of utility methods.
This makes it easier for developers to perform tasks like sorting, searching, and iteration on collections.

5. **Performance:** The framework is designed to be efficient and scalable, with different implementations optimized for various use cases.
This allows developers to choose the appropriate collection type based on their specific requirements.

The Collections Framework includes interfaces (such as List, Set, and Map) and classes (such as ArrayList, HashSet, and HashMap) that cover a wide
range of collection types. This framework has become an integral part of Java programming, making it easier for developers to work with collections and improving the overall consistency and efficiency of Java programs.